I feel that a graphics/physics engine meets the first criteria

My project also meets the criterias of:
Conditionals - I use if, elif, and else statements throughout my project, mainly for collision system checks, but I also use them for error checks and ensuring that paramaters get handled correctly, even with different types, such as a path vs a model object.
Loops - The main majority of the program is run in an infinite loop, but there are other loops as well, such as loading all the meshes from a model.
Logic - I mainly use logic in the collision system to check if multiple conditions are true at once.
Math - This program has a ton of math, especially in the collision/physics system, and also in the graphics shaders and camera class, and more.
Functions - I use a ton of different functions throught my entire project, and most, if not all, have at least 1 paramater and a return value, if not more.
List - I use list for several things, such as storing, formatting, and handling model data, but the my favourite use of lists are in my CenteredList and CenteredSpace classes, which are used to keep track of which objets are near each other.

This is the plan for my presentation:

Introduce my program as a very simple graphics/physics engine

Run the program, showing the car falling and bouncing.
Also show some of the issues, including the car sinking into the ground, and go over how i plan on fixing it
Also state that the collision system is very simple at the moment, and only really works for this test, but it does show that it can be done
Mention frame rate

Maybe:
	Switch to an alternate testing showcase, which demonstrates the rendering ability in greater capacity.

Switch to code view
Give a fairly brief summary of how the whole program works
Starts in __init__.main
Show initialization of different elemnts, specifically camera and drawables/physicals
Go over the purpose of everything in the main loop
Mention cleanup code
Mention resize callback
Show the input processing
Show main call, explain that it allows me control over how errors appear

Open Drawable, go over what different things do
Open Physical, briefly go over centeredlists and centeredspace
Go over the collision system and everything in Physical, explain that it also uses methods from drawable
Open Model and go over how models load, explain the unpredicable loading
Open Mesh and how meshes are loaded and prepared for the gpu, sent to the gpu, and how the meshes are drawn

Open Default.vert and briefly explain
Open Default.frag and briefly explain

Open CompShader and briefly explain
Open SharedFuncs and very briefly explain

Mention that there are issues with a lot of small things, and a lot to improve, especially performance, but it does work for what its designed for